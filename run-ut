#!/bin/bash
#================================================================================
# Run unit tests for program $1
#
# ZUTZCPC will a COPY statements for WORKING-STORAGE entries pertaining to
# unit tests and another for the unit tests themselves, which are expected
# to be defined in a copybook. Then the script compiles the resulting test
# program and executes it. Output goes to stdout.
#================================================================================

function run_unit_tests {

  . envvars

  export SRCPRG="$MAINSRC/$PROGRAM.CBL"
  export TESTPRG="$TESTSRC/TESTPRG.CBL"
  export TESTNAME=TESTPRG
  export UTSTCFG="$TESTRSC/$CONFIG"

  echo "SRCPRG=$SRCPRG"
  echo "TESTPRG=$TESTPRG"
  echo "TESTNAME=$TESTNAME"
  echo "UTSTCFG=$UTSTCFG"



  "$TARGET/ZUTZCPC"
  if [ $? -eq 0 ]; then
    compile --test "$TESTNAME"
    "$TARGET/$TESTNAME"
  fi			
}

function show_help {
	echo 'Run unit test cases for a batch Cobol program'
	echo 'Usage: run ut [options] config-file-name program-name-without-suffix [subprogram-names]'
	echo '    -h --help     Display usage help (this text) and exit'
    echo '    -v  --version Display the version of the unit test framework'
}

function show_version {
	echo "Cobol batch unit test framework $VERSION"
}

CONFIG="$1"
PROGRAM="$2"

TEMP=`getopt -o hv --long help,version \
             -n 'javawrap' -- "$@"`

if [ $? != 0 ] ; then show_help >&2 ; exit 0 ; fi

eval set -- "$TEMP"

while [ $# -gt 0 ]; do
  case "$1" in
    -h | --help ) show_help; exit 0 ;;
    -v | --version ) show_version; exit 0 ;;
    -- ) shift; break ;;
    * ) break ;;
  esac
done

if [ $# -eq 0 ]
  then
    show_help
    exit 0
fi

run_unit_tests
exit 0